"""
Django settings for aquama_hotspot_site project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import configparser

# Config file
CONFIG_FILE_PATH = Path('/etc/hotspot.conf')
config = configparser.ConfigParser()
config.read(CONFIG_FILE_PATH)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load config from config file
if 'Hotspot' in config:
    hotspot_config = config['Hotspot']
    SECRET_KEY = hotspot_config.get('SecretKey', raw=True)
    DEBUG = hotspot_config.getboolean('Debug', False)
    ALLOWED_HOSTS = hotspot_config.get('AllowedHosts').split(',')
    ADMIN_GROUP_NAME = hotspot_config.get('AdminGroupName', 'admins')

else:
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-jvowrv_*q0)cta=3(tk#wdd-*z%s=n4vv98m30k=&ba&2v#b-@'
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
    ALLOWED_HOSTS = []
    ADMIN_GROUP_NAME = 'admins'


# Application definition

INSTALLED_APPS = [
    'hotspots',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'aquama_hotspot_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'aquama_hotspot_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Rest framework
# https://www.django-rest-framework.org/
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static and media files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
if 'StaticFiles' in config:
    static_files_config = config['StaticFiles']
    STATIC_URL = static_files_config.get('StaticUrl', '/static/')
    STATIC_ROOT = static_files_config.get('StaticRoot')
    MEDIA_URL = static_files_config.get('MediaUrl', '/media/')
    MEDIA_ROOT = static_files_config.get('MediaRoot')
else:
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Proxy settings
if 'Proxy' in config:
    proxy_config = config['Proxy']
    USE_X_FORWARDED_HOST = proxy_config.getboolean('UseXForwardedHost', False)
    SECURE_PROXY_SSL_HEADER = (
        'HTTP_X_FORWARDED_PROTO',
        proxy_config.get(
            'HttpXForwardedProto',
            'https'
        )
    )
    SECURE_SSL_REDIRECT = proxy_config.getboolean('SecureSSLRedirect', False)

# Aquama-Hydro settings
if 'Hydro' in config:
    hydro_config = config['Hydro']
    HYDRO_API_KEY = hydro_config.get('ApiKey')
    HYDRO_API_ORIGIN = hydro_config.get('Origin')
    HYDRO_API_USER_TYPE = hydro_config.get('UserType')
    HYDRO_API_USER_KEY = hydro_config.get('UserKey')
    HYDRO_API_SCHEME = hydro_config.get('ApiScheme', 'HTTP')
    HYDRO_API_ADDRESS = hydro_config.get('ApiAddress', 'localhost')
    HYDRO_API_PORT = hydro_config.get('ApiPort', 10080)
else:
    HYDRO_API_KEY = "no key set"
    HYDRO_API_ORIGIN = "Hotspot"
    HYDRO_API_USER_TYPE = "Admin"
    HYDRO_API_USER_KEY = "no key set"
    HYDRO_API_SCHEME = 'HTTP'
    HYDRO_API_ADDRESS = 'localhost'
    HYDRO_API_PORT = 10080

